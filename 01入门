{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "version": "3.7.4-final"
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  }
 },
 "cells": [
  {
   "cell_type": "markdown",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 输出函数print  \n",
    "## 1. 函数原型  \n",
    "- `print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)`\n",
    "  \n",
    "## 2. 参数解析<br/>\n",
    "|参数|含义|\n",
    "|-|-|\n",
    "|objects| 指定待输出的对象，多个对象之间使用英文逗号（`,`）进行分隔|\n",
    "|sep| 指定输出多个对象之间的分隔符，默认是空格（' '）|\n",
    "|end| 指定最后的结束符，默认是换行符（'\\n'）|\n",
    "|file| 指定要写入的文件对象，默认是标准输出流（`sys.stdout`）|\n",
    "|flush| 指定是否强制刷新输出流，默认是不刷新（`False`）|  \n",
    "注：如果指定`sep`,`end`,`file`和`flush`参数，需要使用关键字参数（即通过指定参数名来赋值）。"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Hello World!\n蓝 250\n蓝=250吗？"
    }
   ],
   "source": [
    "#输出控制\n",
    "print(\"Hello World!\")           #Hello World\n",
    "print(\"蓝\", 250)                       #正常输出\n",
    "print(\"蓝\", 250, sep='=', end='吗？')  #多个对象之间分隔符变为“=”，结束符变为“吗？”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "3 3\n3 5\n5 3\n"
    }
   ],
   "source": [
    "#变量，“=”赋值\n",
    "x = y = 3 #Python可以连续赋值\n",
    "print(x,y)\n",
    "# Python的变量值互换\n",
    "x = 3\n",
    "y = 5\n",
    "print(x,y)\n",
    "x, y = y, x\n",
    "print(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Let's go!\nLet's go!\n\"BLUE BLUE\"\n\"Blue, let's go!\"\nAmos\nBlue\nC:\now\nC:\\now\nC:\\now\nC:\\now\\fishc\\a\\\n"
    }
   ],
   "source": [
    "#Python字符串，三种引入方式单引号（' '）双引号（\" \"）三引号（''' '''）\n",
    "#单双引号的使用区别，冲突解决\n",
    "# print('Let's go') 错误，引号必须成双成对出现\n",
    "print('Let\\'s go!')  #转义符（特殊符号表达转义符反斜杠“\\”）\n",
    "print(\"Let's go!\")   #双引号 表达 内部单引号\n",
    "print('\"BLUE BLUE\"') #单引号 表达 双引号\n",
    "print('\"Blue, let\\'s go!\"') #含双引号和单引号，运用转义符\n",
    "print(\"Amos\\nBlue\")  #一对引号，换行输出\n",
    "\n",
    "#含“\\”字符串的输出（知识点：原始字符串）\n",
    "#普通输入 输出错误\n",
    "str0='C:\\now'    #'C:\\now'\n",
    "print(str0)\n",
    "#转义符方法\n",
    "str1='C:\\\\now'   #'C:\\\\now'      \n",
    "print(str1)\n",
    "##加“r” 原始字符串\n",
    "str2=r'C:\\now'   #'C:\\\\now' \n",
    "print(str2)\n",
    "#若原始字符串最后需要有“\\”，则无法正常输出（“\\”不能放在末尾）\n",
    "##str3=r'C:\\now\\fishc\\a\\'  SyntaxError: EOL while scanning string literal\n",
    "###原始字符串+转义符表达的反斜杠\\解决\n",
    "str3=r'C:\\now\\fishc\\a'+'\\\\'   #'C:\\\\now\\\\fishc\\\\a\\\\'\n",
    "print(str3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "\n         @          \n        / \\        \n        * *         \n        * *         \n    * * * * * *     \n  * * * * * * * *   \n* * * * * * * * * * \n        * *         \n        * *         \n      * * * *       \n    * * * * * *     \n\n河海大学\n水文水资源学院\n"
    }
   ],
   "source": [
    "#长字符串\n",
    "#“\\”放在末尾表示未完待续\n",
    "print(\"             \\n\\\n",
    "         @          \\n\\\n",
    "        / \\\\        \\n\\\n",
    "        * *         \\n\\\n",
    "        * *         \\n\\\n",
    "    * * * * * *     \\n\\\n",
    "  * * * * * * * *   \\n\\\n",
    "* * * * * * * * * * \\n\\\n",
    "        * *         \\n\\\n",
    "        * *         \\n\\\n",
    "      * * * *       \\n\\\n",
    "    * * * * * *     \\n\")\n",
    "\n",
    "#跨行长字符串输出，一种方式是行末“\\”，另一种方法是三重引号字符串\n",
    "##三引号同时可用于多行注释，单/双引号的三连效果相同\n",
    "'''以下是\n",
    "多行字符串打印\n",
    "'''\n",
    "str_ch=\"\"\"河海大学\n",
    "水文水资源学院\"\"\"\n",
    "str_ch  #'河海大学\\n水文水资源学院'\n",
    "print(str_ch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": "Amos Blue\n7\nLove Blue Love Blue Love Blue Love Blue Love Blue \nLove Blue\nLove Blue\n\n"
    }
   ],
   "source": [
    "#字符串的加法和乘法，文本拼接相连\n",
    "print(\"Amos\" + \" Blue\")         #输出字符串相加，使用“+”，认为是一个字符串，故无空格\n",
    "print(5+2)                      #输出数字相加\n",
    "print(\"Love Blue \" * 5)         #乘法复制，重复输出\n",
    "print(\"Love Blue\\n\" * 2)        #乘法复制，换行输出"
   ]
  }
 ]
}
